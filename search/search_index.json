{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Titan Docs","text":"<p>This site contains engineering documentation for the Titan Platform, including testing strategy and coding standards.</p> <p>This is an Example site exploring Github Pages</p>"},{"location":"coding-standard/","title":"C# Coding Standard \u2013 Sabre Rail Services Ltd","text":"<p>Revision: 3 Prepared by: D. L. Pratt Date: [Insert Current Date] Company: Sabre Rail Services Ltd</p>"},{"location":"coding-standard/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Layout Conventions</li> <li>Naming Conventions</li> <li>Commenting Conventions</li> <li>Language Guidelines</li> <li>Program.cs and Startup Conventions</li> <li>Swagger and API Documentation</li> <li>Database Initialization and Migrations</li> <li>Development-Time HTTP Clients</li> <li>EditorConfig Usage</li> </ol>"},{"location":"coding-standard/#1-introduction","title":"1. Introduction","text":""},{"location":"coding-standard/#purpose","title":"Purpose","text":"<p>This document defines the C# coding conventions used at Sabre Rail Services Ltd. These standards are derived from Microsoft's recommended practices and adapted for internal use.</p>"},{"location":"coding-standard/#goals","title":"Goals","text":"<ul> <li>Ensure consistent code formatting.</li> <li>Improve readability and maintainability.</li> <li>Facilitate collaboration across development teams.</li> <li>Support best practices in modern C# development.</li> </ul>"},{"location":"coding-standard/#2-layout-conventions","title":"2. Layout Conventions","text":"<ul> <li>Use four-space indentation (tabs saved as spaces).</li> <li>One statement and one declaration per line.</li> <li>Break lines longer than 90 characters.</li> <li>Use parentheses in expressions for clarity.</li> <li>Add blank lines between method and property definitions.</li> <li>Organize code blocks with vertical spacing for readability.</li> </ul> <pre><code>if ((value1 &gt; value2) &amp;&amp; (value1 &gt; value3))\n{\n    // Take appropriate action.\n}\n</code></pre>"},{"location":"coding-standard/#3-naming-conventions","title":"3. Naming Conventions","text":""},{"location":"coding-standard/#capitalization-styles","title":"Capitalization Styles","text":"<ul> <li> <p>PascalCase:</p> </li> <li> <p>Class, record, struct, interface names</p> </li> <li>Method and property names</li> <li>Enum types and members</li> <li> <p>camelCase:</p> </li> <li> <p>Parameters and local variables</p> </li> <li>Private fields (prefixed with <code>_</code>)</li> <li> <p>Prefix Conventions:</p> </li> <li> <p>Static fields: <code>s_</code></p> </li> <li>Thread-static fields: <code>t_</code></li> </ul>"},{"location":"coding-standard/#acronyms","title":"Acronyms","text":"<ul> <li>Two-letter acronyms: all uppercase (e.g., <code>IOStream</code>)</li> <li>Longer acronyms: capitalize only first letter (e.g., <code>XmlReader</code>)</li> </ul>"},{"location":"coding-standard/#enums","title":"Enums","text":"<ul> <li>Use singular names unless marked with <code>[Flags]</code></li> <li>Use PascalCase for members</li> <li>Do not prefix enum values with the enum type</li> </ul> <pre><code>public enum Color\n{\n    Red,\n    Green,\n    Blue\n}\n\n[Flags]\npublic enum FileAccess\n{\n    Read = 1,\n    Write = 2,\n    Execute = 4\n}\n</code></pre>"},{"location":"coding-standard/#4-commenting-conventions","title":"4. Commenting Conventions","text":"<ul> <li>Use full sentences with proper punctuation.</li> <li>Place comments above the relevant code.</li> <li>Avoid decorative comment blocks.</li> <li>Use XML documentation for public members.</li> </ul> <pre><code>// Calculates the total cost including tax.\npublic decimal CalculateTotal(decimal amount, decimal taxRate)\n</code></pre>"},{"location":"coding-standard/#5-language-guidelines","title":"5. Language Guidelines","text":""},{"location":"coding-standard/#strings","title":"Strings","text":"<ul> <li>Use string interpolation:</li> </ul> <pre><code>string message = $\"Hello, {name}\";\n</code></pre> <ul> <li>Use <code>StringBuilder</code> for concatenation in loops.</li> </ul>"},{"location":"coding-standard/#var-usage","title":"var Usage","text":"<ul> <li>Use <code>var</code> when the type is obvious:</li> </ul> <pre><code>var count = 42;\n</code></pre> <ul> <li>Use explicit types when clarity is needed:</li> </ul> <pre><code>int total = CalculateTotal();\n</code></pre>"},{"location":"coding-standard/#arrays","title":"Arrays","text":"<pre><code>string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n</code></pre>"},{"location":"coding-standard/#delegates","title":"Delegates","text":"<ul> <li>Use <code>Func&lt;&gt;</code> and <code>Action&lt;&gt;</code> instead of custom delegate types.</li> </ul>"},{"location":"coding-standard/#whitespace","title":"Whitespace","text":"<ul> <li>Use whitespace to separate logical blocks and improve readability.</li> <li>Align similar lines of code vertically where appropriate.</li> </ul>"},{"location":"coding-standard/#6-programcs-and-startup-conventions","title":"6. Program.cs and Startup Conventions","text":"<p>Structure the <code>Program.cs</code> file using logical sections with comments:</p> <pre><code>// 1. Configuration\n// 2. Authentication\n// 3. Authorization\n// 4. HttpClient\n// 5. Event Store\n// 6. Services\n// 7. Swagger\n// 8. CORS\n// 9. Migrations\n</code></pre> <ul> <li>Consider extracting setup into extension methods for clarity.</li> </ul>"},{"location":"coding-standard/#7-swagger-and-api-documentation","title":"7. Swagger and API Documentation","text":"<ul> <li>Use <code>AddSwaggerGen()</code> to register Swagger.</li> <li>Define JWT bearer token scheme:</li> </ul> <pre><code>c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme {\n    Name = \"Authorization\",\n    Type = SecuritySchemeType.Http,\n    Scheme = \"Bearer\",\n    In = ParameterLocation.Header,\n    Description = \"Enter JWT as: Bearer {your_token}\"\n});\n</code></pre> <ul> <li>Read server URL from configuration for Docker support.</li> </ul>"},{"location":"coding-standard/#8-database-initialization-and-migrations","title":"8. Database Initialization and Migrations","text":"<ul> <li>Use <code>CreateScope()</code> to get scoped services.</li> <li>Catch and log exceptions during migration.</li> <li>Use raw SQL with care for custom migrations.</li> </ul> <pre><code>await store.Storage.ApplyAllConfiguredChangesToDatabaseAsync();\n</code></pre>"},{"location":"coding-standard/#9-development-time-http-clients","title":"9. Development-Time HTTP Clients","text":"<ul> <li>For SSL bypass in development:</li> </ul> <pre><code>builder.Services.AddHttpClient(\"NoSSL\")\n    .ConfigurePrimaryHttpMessageHandler(() =&gt;\n        new HttpClientHandler {\n            ServerCertificateCustomValidationCallback = (_, _, _, _) =&gt; true\n        });\n</code></pre> <ul> <li>Clearly label this as not for production.</li> <li>Wrap registration in development environment checks.</li> </ul>"},{"location":"coding-standard/#10-editorconfig-usage","title":"10. EditorConfig Usage","text":"<ul> <li>Use <code>.editorconfig</code> to enforce style rules project-wide.</li> <li>Specify naming conventions, indentation, newline preferences, etc.</li> <li>Ensure IDEs and editors are configured to respect <code>.editorconfig</code> settings.</li> </ul> <p>Example:</p> <pre><code>[*.cs]\nindent_style = space\nindent_size = 4\ncsharp_new_line_before_open_brace = all\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_elsewhere = false:suggestion\n</code></pre> <p>End of Document</p>"},{"location":"erp-integration-service-modernisation-plan/","title":"ERP Integration Service Modernisation Plan","text":""},{"location":"erp-integration-service-modernisation-plan/#overview","title":"Overview","text":"<p>The ERP Integration Service is a .NET Framework 4.8 Windows Service running on the ERP server. It interfaces with a vendor SDK and ERP system that require persistent login. To improve maintainability and deployment reliability, this document outlines a strategy for modernising the service with automated update management, CI/CD integration, fault tolerance, and support for controlled upgrades.</p>"},{"location":"erp-integration-service-modernisation-plan/#goals","title":"Goals","text":"<ul> <li>Enable automated updates and CI/CD integration for the legacy Windows service</li> <li>Reduce pressure and risk during manual upgrades</li> <li>Introduce fault tolerance for job processing</li> <li>Prepare for zero-downtime or rolling upgrades where feasible</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#1-update-management-with-local-agent","title":"1. Update Management with Local Agent","text":""},{"location":"erp-integration-service-modernisation-plan/#concept","title":"Concept","text":"<p>Instead of deploying updates via remote scripts or DevOps push actions, a local update agent service will run on the ERP server. It monitors for new releases and handles updates automatically when conditions are safe (e.g., no active jobs in the queue).</p>"},{"location":"erp-integration-service-modernisation-plan/#agent-responsibilities","title":"Agent Responsibilities","text":"<ul> <li>Poll a shared location (Azure Blob, file share, or internal API) for new versions</li> <li>Compare version metadata with local version</li> <li>Monitor RabbitMQ queues to determine a safe update window</li> <li>Perform the update:</li> <li>Stop the ERP Integration Service</li> <li>Backup current binary</li> <li>Replace with new version</li> <li>Restart the service</li> <li>Log update activity for auditing and visibility</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#benefits","title":"Benefits","text":"<ul> <li>Enables CI/CD-driven build and publish without direct server access</li> <li>Reduces downtime by ensuring updates only happen during safe periods</li> <li>Supports structured and predictable upgrade cycles</li> <li>Local logging and optional status API for visibility</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#2-cicd-integration-build-publish-only","title":"2. CI/CD Integration (Build &amp; Publish Only)","text":"<ul> <li>Azure DevOps Pipeline builds the Windows Service and packages it as <code>.zip</code> or <code>.msi</code></li> <li>The artifact is pushed to a monitored location:</li> <li>Azure Blob Storage</li> <li>Internal file share</li> <li>HTTP endpoint for version metadata</li> </ul> <p>Note: The deployment execution is handled by the update agent, not by DevOps directly.</p>"},{"location":"erp-integration-service-modernisation-plan/#3-fault-tolerance-architecture","title":"3. Fault Tolerance Architecture","text":""},{"location":"erp-integration-service-modernisation-plan/#queue-based-processing","title":"Queue-Based Processing","text":"<ul> <li>All long-running operations are handled asynchronously via RabbitMQ</li> <li>Ensures user-facing systems are decoupled from ERP system delays</li> <li>Supports retry logic and dead-letter handling for fault isolation</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#redundant-service-design","title":"Redundant Service Design","text":"<ul> <li>If ERP/vendor SDK allows multiple instances:</li> <li>Use multiple service consumers with queue deduplication and idempotency</li> <li>If limited to a single active instance:</li> <li>Implement leader election or locking to prevent concurrency</li> <li>Fallback instance remains dormant unless the active instance fails</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#4-upgrade-and-resilience-strategy","title":"4. Upgrade and Resilience Strategy","text":""},{"location":"erp-integration-service-modernisation-plan/#safe-upgrades-via-update-agent","title":"Safe Upgrades via Update Agent","text":"<ul> <li>New versions are staged and only applied once the queue is drained</li> <li>Ensures ongoing tasks are not disrupted</li> <li>Allows blue-green or side-by-side strategies to be considered in the future</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#5-next-steps","title":"5. Next Steps","text":""},{"location":"erp-integration-service-modernisation-plan/#immediate-tasks","title":"Immediate Tasks","text":"<ul> <li>[ ] Develop the Update Agent as a .NET Worker Service</li> <li>[ ] Add version and health endpoints to ERP Integration Service</li> <li>[ ] Create Azure DevOps pipeline for building and publishing the service</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#medium-term-goals","title":"Medium-Term Goals","text":"<ul> <li>[ ] Implement fault-tolerant job handling with retries and dead-letter queues</li> <li>[ ] Evaluate multiple-instance service support</li> <li>[ ] Add visibility via logs or lightweight web dashboard</li> </ul>"},{"location":"erp-integration-service-modernisation-plan/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li>[ ] Replace legacy SDK with .NET-compatible abstraction</li> <li>[ ] Fully containerise if/when vendor SDK is modernised</li> </ul>"},{"location":"on-boarding/","title":"\ud83e\udded Titan Developer Onboarding Guide","text":"<p>Welcome to the Titan Development Team! This guide will help you understand the systems you'll be working on, set up your environment, and learn the technologies we use.</p>"},{"location":"on-boarding/#project-overview","title":"\ud83d\udce6 Project Overview","text":""},{"location":"on-boarding/#titan3","title":"\ud83c\udfd7 Titan3","text":"<ul> <li>Legacy system maintained in ASP.NET Core MVC</li> <li>Uses SQL Server and Entity Framework</li> <li>Monolithic with some modular separation</li> <li>Still live and operational for core business functions</li> </ul>"},{"location":"on-boarding/#titan4","title":"\ud83d\ude80 Titan4","text":"<ul> <li>Modular architecture using .NET 8/9</li> <li>Event Sourced with Marten on PostgreSQL</li> <li>Dockerized deployment (Dev/Prod parity)</li> <li>Designed to support long-term scalability and flexibility</li> <li>Custom-built authentication system under Titan 4 umbrella</li> </ul>"},{"location":"on-boarding/#migration-goal","title":"\ud83d\udd04 Migration Goal","text":"<ul> <li>Gradually port Titan3 modules to Titan4</li> <li>Retain backward compatibility during transition</li> <li>Improve system observability, audit trails, and resilience</li> </ul>"},{"location":"on-boarding/#development-environment-setup","title":"\u2699\ufe0f Development Environment Setup","text":""},{"location":"on-boarding/#1-required-tools","title":"1. Required Tools","text":"<ul> <li>.NET SDK 8.0+</li> <li>Docker Desktop</li> <li>Visual Studio 2022+</li> <li>PostgreSQL Client (optional)</li> <li>Git + GitHub CLI</li> </ul>"},{"location":"on-boarding/#2-clone-repositories","title":"2. Clone Repositories","text":"<pre><code>git clone https://github.com/your-org/titan3.git\ngit clone https://github.com/your-org/titan4.git\n</code></pre>"},{"location":"on-boarding/#3-configure-secrets","title":"3. Configure Secrets","text":"<ul> <li>Setup <code>.env</code> files or <code>secrets.json</code> as per team lead instructions</li> <li>Update <code>appsettings.Development.json</code> with local connection strings</li> </ul>"},{"location":"on-boarding/#4-run-docker-services","title":"4. Run Docker Services","text":"<pre><code>docker-compose up --build\n</code></pre>"},{"location":"on-boarding/#5-verify","title":"5. Verify","text":"<ul> <li>Access Titan3 via http://localhost:5000</li> <li>Access Titan4 via http://localhost:8080</li> </ul>"},{"location":"on-boarding/#core-technologies","title":"\ud83e\uddf1 Core Technologies","text":"Technology Usage Marten Event storage and projections PostgreSQL Event and read model database Docker Containerized deployment for local and prod Titan.Auth Custom authentication and authorization system ASP.NET Core MVC Web and API architecture EF Core Data access in legacy Titan3 QuestPDF Document generation (e.g., AWK PDFs) Serilog Structured logging xUnit / Playwright Unit and end-to-end testing"},{"location":"on-boarding/#pre-start-learning-resources","title":"\ud83d\udcda Pre-Start Learning Resources","text":""},{"location":"on-boarding/#event-sourcing-cqrs","title":"Event Sourcing &amp; CQRS","text":"<ul> <li>Event Sourcing Pattern \u2013 Microsoft</li> <li>Marten Event Sourcing Docs</li> <li>Intro to Event Sourcing \u2013 YouTube</li> </ul>"},{"location":"on-boarding/#net-aspnet-core","title":".NET &amp; ASP.NET Core","text":"<ul> <li>Build Web API with ASP.NET Core</li> <li>Razor Pages &amp; MVC</li> <li>Dependency Injection in .NET</li> </ul>"},{"location":"on-boarding/#containers-docker","title":"Containers &amp; Docker","text":"<ul> <li>Docker for .NET Devs</li> <li>Docker Get Started Guide</li> <li>Docker Compose Basics</li> </ul>"},{"location":"on-boarding/#postgresql","title":"PostgreSQL","text":"<ul> <li>PostgreSQL for Developers</li> <li>EF Core + Npgsql</li> </ul>"},{"location":"on-boarding/#development-standards","title":"\ud83d\udcd0 Development Standards","text":"<ul> <li>\u2705 Naming conventions (PascalCase for classes, camelCase for variables)</li> <li>\u2705 DI via constructor injection</li> <li>\u2705 Avoid magic strings/constants \u2013 use enums or config</li> <li>\u2705 GitHub Flow: <code>main</code> for release, <code>dev</code> for integration, features as <code>feature/xyz</code></li> <li>\u2705 Commit messages follow: <code>feat:</code>, <code>fix:</code>, <code>refactor:</code>, <code>docs:</code>, <code>test:</code></li> </ul>"},{"location":"on-boarding/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"Type Tool Notes Unit Tests xUnit Write for service logic, projections Integration xUnit + Testcontainers Validate end-to-end flows UI Testing Playwright Smoke tests for key user flows"},{"location":"on-boarding/#security-permissions","title":"\ud83d\udd10 Security &amp; Permissions","text":"<ul> <li>Titan.Auth handles token issuance and user authentication</li> <li>Roles and permissions managed within the Titan 4 custom auth system</li> <li>Sensitive APIs require <code>[RequirePermission(\"xyz\")]</code> attributes</li> <li>Permissions are dynamically checked against Titan.Auth, not hardcoded</li> </ul>"},{"location":"on-boarding/#cicd-overview","title":"\ud83d\ude80 CI/CD Overview","text":"<ul> <li>GitHub Actions for build/test/lint</li> <li>Containers pushed to GHCR or private registry</li> <li>Staging environment deployed on merge to <code>main</code></li> <li>Releases tagged via <code>release.yml</code></li> </ul>"},{"location":"on-boarding/#onboarding-timeline","title":"\ud83d\udcc6 Onboarding Timeline","text":"Week Goals Pre-Start Review learning material, install tools Week 1 Set up environment, explore Titan3/Titan4 codebases Week 2 Fix bugs in Titan3, assist on Titan4 events Week 3 Begin porting a Titan3 module to Titan4 Week 4+ Take ownership of a service in Titan4 and help plan migration strategy"},{"location":"on-boarding/#contacts-support","title":"\ud83e\uddd1\u200d\ud83d\udcbb Contacts &amp; Support","text":"Name Role Email Darren Pratt Digital Services Manager darren.pratt@sabrerail.com [Mentor Name] Lead Developer [email] IT Support Environment/Access itsupport@[domain].com <p>Welcome aboard and happy building! \ud83d\udcbb\ud83d\ude80</p>"},{"location":"test-strategy/","title":"Test Strategy Document \u2013 Sabre Rail Services Ltd","text":"<p>Project: Titan Platform Document Version: 1.0 Prepared by: D. L. Pratt Date: [Insert Date]</p>"},{"location":"test-strategy/#1-introduction","title":"1. Introduction","text":"<p>This document defines the test strategy for the Titan system, covering automated testing practices using xUnit for unit and integration tests, and Playwright for end-to-end (E2E) UI testing.</p>"},{"location":"test-strategy/#objectives","title":"Objectives","text":"<ul> <li>Ensure code quality through automated testing.</li> <li>Standardize test tools and patterns across projects.</li> <li>Facilitate CI/CD integration and reliable regression testing.</li> </ul>"},{"location":"test-strategy/#2-test-types","title":"2. Test Types","text":""},{"location":"test-strategy/#21-unit-testing-xunit","title":"2.1 Unit Testing (xUnit)","text":"<ul> <li>Covers individual methods and business logic.</li> <li>Mocking dependencies using Moq.</li> <li>Test naming convention: <code>MethodName_Condition_ExpectedOutcome</code></li> <li>Test pattern: Arrange\u2013Act\u2013Assert (AAA)</li> </ul> <pre><code>[Fact]\npublic void CalculateTotal_WithValidInputs_ReturnsCorrectSum()\n{\n    // Arrange\n    var calculator = new Calculator();\n\n    // Act\n    var result = calculator.CalculateTotal(2, 3);\n\n    // Assert\n    Assert.Equal(5, result);\n}\n</code></pre>"},{"location":"test-strategy/#22-integration-testing-xunit-testserver","title":"2.2 Integration Testing (xUnit + TestServer)","text":"<ul> <li>Tests multiple components working together.</li> <li>Use <code>WebApplicationFactory&lt;T&gt;</code> for ASP.NET Core APIs.</li> <li>Configure test DB (e.g., SQLite in-memory or TestContainers for PostgreSQL).</li> </ul>"},{"location":"test-strategy/#23-end-to-end-testing-playwright","title":"2.3 End-to-End Testing (Playwright)","text":"<ul> <li>Browser-based tests simulating real user interactions.</li> <li>Written in TypeScript or C# via Microsoft.Playwright.</li> <li>Run headless in CI pipelines, with video and trace capture enabled.</li> <li>Base URLs are injected via environment variables.</li> </ul> <pre><code>test('Visitor login should show dashboard', async ({ page }) =&gt; {\n  await page.goto(process.env.BASE_URL + '/login');\n  await page.fill('#username', 'testuser');\n  await page.fill('#password', 'P@ssword123');\n  await page.click('button[type=submit]');\n  await expect(page).toHaveURL(/.*dashboard/);\n});\n</code></pre>"},{"location":"test-strategy/#3-tooling-and-frameworks","title":"3. Tooling and Frameworks","text":"Purpose Tool Unit Testing xUnit Mocking Moq Integration xUnit + WebApplicationFactory E2E Testing Microsoft.Playwright Test Reporting Playwright Traces / Test Output Logs"},{"location":"test-strategy/#4-project-structure","title":"4. Project Structure","text":"<pre><code>/tests\n\u251c\u2500\u2500 Titan.App.UnitTests          # xUnit unit tests\n\u251c\u2500\u2500 Titan.App.IntegrationTests   # Integration tests\n\u2514\u2500\u2500 Titan.App.E2ETests           # Playwright tests\n</code></pre>"},{"location":"test-strategy/#5-cicd-integration","title":"5. CI/CD Integration","text":"<ul> <li>All test projects are executed in GitHub Actions.</li> <li>Unit + integration tests run on <code>.NET 8</code> matrix.</li> <li>E2E tests run in parallel using <code>npx playwright test</code>.</li> <li>Playwright artifacts (videos, traces, screenshots) are uploaded on failure.</li> </ul>"},{"location":"test-strategy/#6-quality-gates","title":"6. Quality Gates","text":"Metric Threshold Unit Test Coverage 80% minimum Integration Test Pass 100% required E2E Test Stability Rate 95%+ over 3 runs"},{"location":"test-strategy/#7-best-practices","title":"7. Best Practices","text":"<ul> <li>Test only public behavior, not implementation details.</li> <li>Isolate unit tests from external dependencies.</li> <li>Avoid flaky tests by ensuring stable selectors in Playwright.</li> <li>Prefer <code>[Theory]</code> + <code>[InlineData]</code> for reusable xUnit tests.</li> <li>Mark slow or unstable tests with <code>[Trait(\"Category\", \"Slow\")]</code>.</li> </ul>"},{"location":"test-strategy/#8-maintenance-and-ownership","title":"8. Maintenance and Ownership","text":"<ul> <li>Test ownership lies with the same team responsible for the corresponding feature.</li> <li>Tests must be updated alongside the feature.</li> <li>Broken tests in <code>main</code> block merges until resolved.</li> </ul> <p>End of Document</p>"}]}